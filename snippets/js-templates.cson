".source.js":
  "load Engine":
    "prefix": "famdengine"
    "body": "var Engine = require('famous/core/Engine');"
  "load View":
    "prefix": "famdview"
    "body": "var View = require('famous/core/View');"
  "load Surface":
    "prefix": "famdsurface"
    "body": "var Surface = require('famous/core/Surface');"
  "load ImageSurface":
    "prefix": "famdimagesurface"
    "body": "var ImageSurface = require('famous/surfaces/ImageSurface');"
  "load InputSurface":
    "prefix": "famdinputsurface"
    "body": "var InputSurface = require('famous/surfaces/InputSurface');"
  "load StateModifier":
    "prefix": "famdstatemodifier"
    "body": "var StateModifier = require('famous/modifiers/StateModifier');"
  "load Modifier":
    "prefix": "famdmodifier"
    "body": "var Modifier = require('famous/core/Modifier');"
  "load Easing":
    "prefix": "famdeasing"
    "body": "var Easing = require('famous/transitions/Easing');"
  "load Scene":
    "prefix": "famdscene"
    "body": "var Scene = require('famous/core/Scene');"
  "load RenderNode":
    "prefix": "famdrendernode"
    "body": "var RenderNode = require('famous/core/RenderNode');"
  "load Transform":
    "prefix": "famdtransform"
    "body": "var Transform = require('famous/core/Transform');"
  "load Transitionable":
    "prefix": "famdtransitionable"
    "body": "var Transitionable = require('famous/transitions/Transitionable');"
  "load HeaderFooterLayout":
    "prefix": "famdhflay"
    "body": "var HeaderFooterLayout = require('famous/views/HeaderFooterLayout');"
  "load GridLayout":
    "prefix": "famdgridlay"
    "body": "var GridLayout = require('famous/views/GridLayout');"
  "load FlexibleLayout":
    "prefix": "famdflexlay"
    "body": "var FlexibleLayout = require('famous/views/FlexibleLayout');"
  "load SequentialLayout":
    "prefix": "famdseqlay"
    "body": "var SequentialLayout = require('famous/views/SequentialLayout');"
  "load Scrollview":
    "prefix": "famdscrollview"
    "body": "var Scrollview = require('famous/views/Scrollview');"
  "load EdgeSwapper":
    "prefix": "famdedgeswapper"
    "body": "var EdgeSwapper = require('famous/views/EdgeSwapper');"
  "load Deck":
    "prefix": "famddeck"
    "body": "var Deck = require('famous/views/Deck');"
  "load Flipper":
    "prefix": "famdflipper"
    "body": "var Flipper = require('famous/views/Flipper');"
  "load RenderController":
    "prefix": "famdrendercontroller"
    "body": "var RenderController = require('famous/views/RenderController');"
  "load RenderNode":
    "prefix": "famdrendernode"
    "body": "var RenderNode = require('famous/core/RenderNode');"
  "load Fader":
    "prefix": "famdfader"
    "body": "var Fader = require('famous/modifiers/Fader');"
  "load Timer":
    "prefix": "famdtimer"
    "body": "var Timer = require('famous/utilities/Timer');"
  "load Utility":
    "prefix": "famodutility"
    "body": "var Utility = require('famous/utilities/Utility');"
  "load GenericSync":
    "prefix": "famdgenericsync"
    "body": "var GenericSync = require('famous/inputs/GenericSync');"
  "load MouseSync":
    "prefix": "famdmousesync"
    "body": "var MouseSync = require('famous/inputs/MouseSync');"
  "load TouchSync":
    "prefix": "famdtouchsync"
    "body": "var TouchSync = require('famous/inputs/TouchSync');"
  "load ScrollSync":
    "prefix": "famdscrollsync"
    "body": "var ScrollSync = require('famous/inputs/ScrollSync');"
  "new GenericSync":
    "prefix": "famgenericsync"
    "body": """
    GenericSync.register({
        'mouse': MouseSync,
        'touch': TouchSync,
        'scroll': ScrollSync
    });
    """
  "new View":
    "prefix": "famnview"
    "body": """
    define(function(require, exports, module) {
        var View = require('famous/core/View');
        var Engine = require('famous/core/Engine');
        var Surface = require('famous/core/Surface');
        var Transform = require('famous/core/Transform');
        var RenderNode = require('famous/core/RenderNode');
        var StateModifier = require('famous/modifiers/StateModifier');

        $1.prototype = Object.create(View.prototype);
        $1.prototype.constructor = $1;

        $1.DEFAULT_OPTIONS = {

        };

        function $1(options) {
            View.apply(this, arguments);




            //this.add(yourstuff);
        }

        module.exports = $1;
    });
    """
  "new Surface":
    "prefix": "famnsurface"
    "body": """
        $1 = new Surface({
            size: [undefined, undefined],
            content: '',
            classes: [],
            properties: {
                color: 'white',
                textAlign: 'center',
                backgroundColor: '#FA5C4F'
            }
        });
    """
  "new ImageSurface":
    "prefix": "famnimagesurface"
    "body": """
        $1 = new ImageSurface({
            size: [true, true],
            content: '/*url*/'
        });
    """
  "new InputSurface":
    "prefix": "famninputsurface"
    "body": """
        $1 = new InputSurface({
            size: [200, 100],
            placeholder: '',
            type: 'text' // or 'button'
        });
    """
  "new StateModifier":
    "prefix": "famnstatemodifier"
    "body": """
        $1 = new StateModifier({
            align: [0, 0],
            origin: [0, 0],
            transform: Transform.translate(0, 0, 0)
        });
    """
  "new Modifier":
    "prefix": "famnmodifier"
    "body": """
        $1 = new Modifier({
            // proportions: [.5, .25],
            align: [0, 0],
            origin: [0, 0],
            transform: Transform.translate(0, 0, 0)
        });
    """
  "new Header Footer Layout":
    "prefix": "famnhflay"
    "body": """
        /**
         *  Header Footer Layout
         */
        $1 = new HeaderFooterLayout({
            headerSize: $2,
            footerSize: $3
        });

        $1.header.add();
        $1.content.add();
        $1.footer.add();

        this.add($1);
    """
  "new Grid Layout":
    "prefix": "famngridlay"
    "body": """
        /**
         *  Grid Layout
         */
        $1 = new GridLayout({
          dimensions: [$2, $3]
        });

        this.surfaces = [];

        $1.sequenceFrom(surfaces);

        for(var i = 0; i < 8; i++) {
            var surf = new Surface({
                content: "panel " + (i + 1),
                size: [undefined, undefined],
                properties: {
                    backgroundColor: "hsl(" + (i * 360 / 8) + ", 100%, 50%)",
                    color: "#404040",
                    lineHeight: '200px',
                    textAlign: 'center'
                }
            });
            this.surfaces.push(surf)
        }

        this.add($1);
    """
  "new Flexible Layout":
    "prefix": "famnflexlay"
    "body": """
        /**
         *  Flexible Layout
         */
        this.elements = ['1', '2', '.3'];

        var ratios = [1, 3, 5];
        var $1 = new FlexibleLayout({
            ratios: ratios
        });

        var surfaces = [];

        for (var i = 0; i < this.elements.length; i++) {
            var surf = new Surface({
                size: [undefined, undefined],
                content: this.elements[i],
                properties: {
                    backgroundColor: "hsl(" + (i * 360 / this.elements.length) + ", 100%, 50%)"
                }
            });

            this.surfaces.push(surf);
        }

        $1.sequenceFrom(this.surfaces);

        this.add($1);
    """
  "new Sequential Layout":
    "prefix": "famnseqlay"
    "body": """
        /**
         *  Sequential Layout
         */
        this.elements = ['1', '2', '3', '4'];

        this.$1 = new SequentialLayout({
            direction: 0
        });

        this.surfaces = [];
        this.sequenceFrom(surfaces);

        for (var i = 0; i < this.elements.length; i++) {
            var surf = new Surface({
                size: [undefined, 50],
                content: this.elements[i],
                properties: {
                    backgroundColor: "hsl(" + (i * 360 / this.elements.length) + ", 100%, 50%)",
                }
            });

            this.surfaces.push(surf);
        }

        this.add($1);
    """
  "new Scrollview":
    "prefix": "famnscrollview"
    "body": """
        /**
         *  Scrollview
         */
        this.elements = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];

        $1 = new Scrollview();
        this.surfaces = [];

        $1.sequenceFrom(this.surfaces);

        for (var i = 0; i < this.elements.length; i++) {
            var surf = new Surface({
                content: "Surface: " + this.elements[i],
                size: [undefined, 200],
                properties: {
                    backgroundColor: "hsl(" + (i * 360 / this.elements.length) + ", 100%, 50%)",
                    lineHeight: "200px",
                    textAlign: "center"
                }
            });

            surf.pipe($1);
            this.surfaces.push(surf);
        }

        this.add($1);
    """
  "new EdgeSwapper":
    "prefix": "famnedgeswapper"
    "body": """
        /**
         *  EdgeSwapper
         */
        this.elements = ['1', '2', '3', '4'];

        $1 = new EdgeSwapper();

        this.surfaces = [];
        this.counter = 0;

        for(var i = 0; i < this.elements.length; i++) {
            var surf = new Surface({
                size: [undefined, undefined],
                content: this.elements[i],
                properties: {
                    color: 'black',
                    fontSize: '30px',
                    textAlign: 'center',
                    backgroundColor: "hsl(" + (i * 360 / this.elements.length) + ", 100%, 50%)",
                    lineHeight: window.innerHeight + "px",
                    textAlign: "center"
                }
            });

            surf.on('click', function() {
                this.counter = this.counter == surfaces.length - 1 ? 0 : this.counter + 1;
                $1.show(this.surfaces[this.counter]);
            });

            this.surfaces.push(surf);
        }

        this.add($1);

        $1.show(this.surfaces[this.counter]);
    """
  "new Deck":
    "prefix": "famndeck"
    "body": """
        /**
         * Deck
         */
        this.elements = ['1', '2', '3', '4'];

        this.surfaces = [];

        var $1 = new Deck({
            itemSpacing: 10,
            transition: {
                method: 'spring',
                period: 300,
                dampingRatio: 0.5
            },
            stackRotation: 0.02,
            direction: 0
        });

        $1.sequenceFrom(this.surfaces);

        for(var i = 0; i < this.elements.length; i++) {
            var surf = new Surface({
                size: [100, 200],
                classes: ['test'],
                properties: {
                    backgroundColor: 'hsla(' + ((i * this.elements.length + i) * 15 % 360) + ', 60%, 50%, 0.8)'
                },
                content: this.elements[i]
            });

            surf.on('click', function() {
                $1.toggle();
            });
            this.surfaces.push(surf);
        }

        this.add($1);
    """
  "new Flipper":
    "prefix": "famnflipper"
    "body": """
        /**
         *  Flipper
         */
        // mainContext.setPerspective(500);

        $1 = new Flipper();

        var frontSurface = new Surface({
            size : [200, 200],
            content : 'front',
            properties : {
                background : 'red',
                lineHeight : '200px',
                textAlign  : 'center'
            }
        });

        var backSurface = new Surface({
            size : [200, 200],
            content : 'back',
            properties : {
                background : 'blue',
                color : 'white',
                lineHeight : '200px',
                textAlign  : 'center'
                }
        });

        $1.setFront(backSurface);
        $1.setBack(new Surface());

        this.add($1);
    """
  "new RenderController":
    "prefix": "famnrendercontroller"
    "body": """
        /**
        *  RenderController
        */
        this.elements = ['1', '2', '3', '4'];

        $1 = new RenderController();

        this.surfaces = [];
        this.counter = 0;

        for (var i = 0; i < this.elements.length; i++) {
            var surf = new Surface({
                content: "Surface: " + this.elements[i],
                size: [200, 200],
                properties: {
                    backgroundColor: "hsl(" + (i * 360 / this.elements.length) + ", 100%, 50%)",
                    lineHeight: "200px",
                    textAlign: 'center'
                }
            });

            surf.on('click', function() {
                this.counter = this.counter == this.surfaces.length - 1 ? 0 : this.counter + 1;
                $1.show(this.surfaces[this.counter]);
            });

            this.surfaces.push(surf);
        }

        $1.show(this.surfaces[this.counter);

        this.add($1);
    """
  "new Fader":
    "prefix": "famnfader"
    "body": """
        /**
         *  Fader
         */
        $1 = new Fader();
        $1.hide();

        this.surf = new Surface({
            size : [200, 200],
            content : 'back',
            properties : {
                background : 'blue',
                color : 'white',
                lineHeight : '200px',
                textAlign  : 'center'
            }
        });

        this.surfMod = new StateModifier();

        this.add(this.surfMod).add($1).add(this.surf);

        // $1.show();
    """
  "new RenderNode":
    "prefix": "famrendernode"
    "body": """
        /**
         *  Create the render node and add elements
         */
        this.renderNode = new RenderNode();
        this.renderNode.add(new StateModifier()).add(new Surface());

        /**
         *  Add my node to the render tree
         */
        this.add(this.nodeRoot);
    """
  "Timer setInterval":
    "prefix": "famtinterval"
    "body": """
        Timer.setInterval(function() {

        }, $1);
    """
  "Timer setTimeout":
    "prefix": "famttimeout"
    "body": """
        Timer.setTimeout(function() {

        }, $1);
    """
  "Timer every":
    "prefix": "famtevery"
    "body": """
        Timer.every(function() {

        }, $1);
    """
  "Timer after":
    "prefix": "famtafter"
    "body": """
        Timer.after(function() {

        }, $1);
    """
  "Utility after":
    "prefix": "famuafter"
    "body": """
        /**
         *  After
         *
         *  After is a utility that will run a particular callback
         *  once the returned function is called a set number of
         *  times.
         *
         *  In the example, the callback is run after the 5th click.
         */

        var fn = Utility.after(5, function() {
            alert('Was called on 5th try');
        });

        Engine.on('click', fn);
    """
  "Utility loadURL":
    "prefix": "famuloadurl"
    "body": """
        /**
         *  LoadURL
         *  Load a URL and return its contents in a callback
         */

        function myCallback(text) {
            console.log(text);
        }

        Utility.loadURL('http://$1', myCallback(text));
    """
  "Utility createDocumentFragmentFromHTML":
    "prefix": "famufragfromhtml"
    "body": """
        /**
         *  CreateDocumentFragmentFromHTML
         *  Create a document fragment from a string of HTML
         */

        // input a HTML string
        var documentFragment = Utility.createDocumentFragmentFromHTML($1);
    """
  "Utility clone":
    "prefix": "famuclone"
    "body": """
        /**
         *  Clone
         *  Utility.createDocumentFragmentFromHTML
         */

        // input an object
        var clonedObject = Utility.clone($1);
    """
  "RootNode":
    "prefix": "famrootnode"
    "body": """
        /**
         *  Create the root node with its modifier
         */
        this.rootModifier = new StateModifier({
            size: this.options.size,
            align: this.options.align,
            origin: this.options.origin
        });
        this.rootNode = this.add(this.rootModifier);

        /**
         *  Create my page elements
         */

        /**
         *  Add the elements to the root node
         */
        this.rootNode.add(new Surface({}));
    """
  "Keycodes":
    "prefix": "famkeycodes"
    "body": """
        Engine.on('keypress', function(event) {
			if (event.charCode >= KeyCodes['0'] && event.charCode <= KeyCodes['9']) {
				console.log('you hit a number');
			} else {
				console.log('not a number');
			}
		});
    """
  "Transition":
    "prefix": "famtransition"
    "body": "{ duration : $1, curve: Easing.linear }"
  "example Swipe":
    "prefix": "fameswipe"
    "body": """
        /* !ONLY FOR EXAMPLE PURPOSE! */
        var GenericSync     = require('famous/inputs/GenericSync');
        var MouseSync       = require('famous/inputs/MouseSync');
        var TouchSync       = require('famous/inputs/TouchSync');
        GenericSync.register({'mouse': MouseSync, 'touch': TouchSync});

        var options = {
            openPosition: -276,
            transition: {
                duration: 300,
                curve: 'easeOut'
            },
            posThreshold: 138,
            velThreshold: 0.50
        };

        var currentPos = new Transitionable([0, 0]);

        var sync = new GenericSync(['mouse', 'touch'], {
            direction: GenericSync.DIRECTION_X
        });
        surf.pipe(sync);

        function _handleSwipe() {
            sync.on('update', function (data) {
                var currentPosition = contentPos.get();
                contentPos.set(currentPosition + data.delta);
            }.bind(this));

            sync.on('end', (function (data) {
                var velocity = data.velocity;
                var position = contentPos.get();

                if(contentPos.get() > this.options.posThreshold) {
                    if(velocity < -this.options.velThreshold) {
                        this.slideLeft();
                    } else {
                        this.slideRight();
                    }
                } else {
                    if(velocity > this.options.velThreshold) {
                        this.slideRight();
                    } else {
                        this.slideLeft();
                    }
                }
            }).bind(this));
        }

        AppView.prototype.slideLeft = function() {
            this.pageViewPos.set(0, this.options.transition, function() {

            }.bind(this));
        };

        AppView.prototype.slideRight = function() {
            this.pageViewPos.set(this.options.openPosition, this.options.transition, function() {

            }.bind(this));
        };
    """
  "Boilerplate":
    "prefix": "famboilerplate"
    "body": """
	define(function(require, exports, module) {
		// import dependencies
		var Engine = require('famous/core/Engine');
		var Modifier = require('famous/core/Modifier');
		var Transform = require('famous/core/Transform');
		var ImageSurface = require('famous/surfaces/ImageSurface');

		// create the main context
		var mainContext = Engine.createContext();

		// your app here
		var logo = new ImageSurface({
			size: [200, 200],
			content: 'http://code.famo.us/assets/famous_logo.svg',
			properties: {
				'-webkit-backface-visibility': 'visible',
				'backface-visibility': 'visible'
			}
		});

		var initialTime = Date.now();
		var centerSpinModifier = new Modifier({
			origin: [0.5, 0.5],
			transform : function(){
				return Transform.rotateY(.002 * (Date.now() - initialTime));
			}
		});

		mainContext.add(centerSpinModifier).add(logo);
	});
	"""
